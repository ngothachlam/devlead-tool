<project name="MyProject" default="default" basedir=".">
	<description> simple example build file</description>
	<property name="src" location="src" />
	<property name="src.tests.unit.specific" location="test-unit-specific" />
	<property name="src.tests.unit.functional" location="test-unit-functional" />
	<property name="src.tests.functional" location="test-functional" />
	<property name="build" location="build" />
	<property name="build.classes" location="${build}/classes" />
	<property name="build.tests" location="${build}/tests" />
	<property name="build.tests.results" location="${build}/tests-results" />
	<property name="dist" location="dist" />

	<property name="DERBYCLASSPTH" value="bin;lib/derby.jar;lib/derbytools.jar;lib/derbynet.jar" />
	<property name="DBURL" value="jdbc:derby:db/data/test;create=true" />
	<property name="DRIVER" value="org.apache.derby.jdbc.EmbeddedDriver" />
	<property name="USERID" value="" />
	<property name="PASSWORD" value="" />

	<path id="project.class.path">
		<pathelement location="lib" />
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="lib">
			<include name="**/**/*.jar" />
		</fileset>
		<pathelement path="${java.class.path}/" />
		<pathelement path="${additional.path}" />
	</path>

	<target name="clean" description="clean up">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build}" includes="**/*" />
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${dist}" includes="**/*" />
		</delete>
	</target>

	<target name="clean.after" description="clean up">
		<delete includeemptydirs="true">
			<fileset dir="${build.classes}" includes="**/*" />
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${build.tests}" includes="**/*" />
		</delete>
	</target>

	<target name="init" depends="clean">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.tests}" />
	</target>

	<target name="compile" depends="init" description="compile the source ">
		<javac srcdir="${src}" destdir="${build.classes}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
		</javac>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<mkdir dir="${dist}" />
		<jar jarfile="${dist}/devlead-tool-${DSTAMP}.jar" basedir="${build.classes}">
			<manifest>
				<attribute name="Main-Class" value="com.jonas.agile.devleadtool.Main" />
			</manifest>

		</jar>
		<copy file="${dist}/devlead-tool-${DSTAMP}.jar" tofile="${dist}/devlead-tool.jar" overwrite="true" />
	</target>

	<target name="compile.tests" depends="dist" description="compile the source ">
		<mkdir dir="${build.tests}/dist" />
		<javac srcdir="${src.tests.unit.specific}" destdir="${build.tests}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
			<classpath location="${dist}/devlead-tool-${DSTAMP}.jar" />
		</javac>
		<javac srcdir="${src.tests.functional}" destdir="${build.tests}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
			<classpath location="${dist}/devlead-tool-${DSTAMP}.jar" />
		</javac>
		<jar jarfile="${build.tests}/dist/tests.jar" basedir="${build.tests}" />
	</target>

	<target name="run.tests.unit" depends="run.tests.unit.specific, run.tests.unit.functional" description="Run unit tests" />

	<target name="run.tests.unit.specific" description="Run unit tests">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${build.tests.results}" includes="**/*" />
		</delete>
		<mkdir dir="${build.tests.results}" />
		<mkdir dir="bin/junitTemp" />
		<junit printsummary="yes" haltonfailure="no" tempdir="bin/junitTemp">
			<classpath refid="project.class.path" />
			<classpath>
				<pathelement path="bin" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${build.tests.results}">
				<fileset dir="${src.tests.unit.specific}">
					<include name="**/*Test.java" />
					<exclude name="**/*TestScreen.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="run.tests.unit.functional" description="Run unit tests">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${build.tests.results}" includes="**/*" />
		</delete>
		<mkdir dir="${build.tests.results}" />
		<mkdir dir="bin/junitTemp" />
		<junit printsummary="yes" haltonfailure="no" tempdir="bin/junitTemp">
			<classpath refid="project.class.path" />
			<classpath>
				<pathelement path="bin" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${build.tests.results}">
				<fileset dir="${src.tests.unit.functional}">
					<include name="**/*Test.java" />
					<exclude name="**/*TestScreen.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="run.tests.functional" description="Run functional tests">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${build.tests.results}" includes="**/*" />
		</delete>
		<mkdir dir="${build.tests.results}" />
		<mkdir dir="bin/junitTemp" />
		<junit printsummary="yes" haltonfailure="no" tempdir="bin/junitTemp">
			<classpath refid="project.class.path" />
			<classpath>
				<pathelement path="bin" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${build.tests.results}">
				<fileset dir="${src.tests.functional}">
					<include name="**/*Test.java" />
					<exclude name="**/*TestScreen.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="default" depends="run.tests.unit, run.tests.functional ,dist, clean.after" />

	<taskdef name="startDerby" classname="com.jonas.ant.db.StartDerbyTask" classpath="${DERBYCLASSPTH}" loaderref="db.loader" />
	<taskdef name="stopDerby" classname="com.jonas.ant.db.StopDerbyTask" classpath="${DERBYCLASSPTH}" loaderref="db.loader" />
	<taskdef name="stopDatabase" classname="com.jonas.ant.db.StopDatabaseTask" classpath="${DERBYCLASSPTH}" loaderref="db.loader" />
	<taskdef name="ddlExport" classname="com.jonas.ant.db.DBLookTask" classpath="${DERBYCLASSPTH}" loaderref="db.loader" />
	<taskdef name="testDatabase" classname="com.jonas.ant.db.TestDatabaseTask" classpath="${DERBYCLASSPTH}" loaderref="db.loader" />

	<target name="db.start">
		<startDerby />
	</target>

	<target name="db.stop">
		<stopDatabase url="${DBURL}" />
		<stopDerby />
	</target>

	<target name="db.test.select" depends="db.start">
		<testDatabase url="${DBURL}" sql="SELECT * FROM TEST" />
		<stopDerby />
	</target>

	<target name="db.test.setup" depends="db.start">
		<!-- This is the default Ant sql task -->
		<sql classpath="lib/derby.jar" driver="${DRIVER}" url="${DBURL}" userid="${USERID}" password="${PASSWORD}" autocommit="yes" onerror="continue" caching="yes">
		      DROP TABLE TEST;
		      CREATE TABLE TEST (
			  id int not null generated always as identity (start with 1, increment by 1), 
			  name char(10));
		      INSERT INTO TEST (name) VALUES ('${TEST}');
		      SELECT * FROM TEST;
		    </sql>
		<!-- The SQL Command will leave the Derby database is a started state.
		         To protect the integrity of the database, you should explicitly 
		         stop the database -->

	</target>

	<target name="db.test.all" depends="db.start">
		<property name="TEST" value="testing" />

		<testDatabase url="${DBURL}" sql="SELECT * FROM TEST" />

		<!-- Use the dblook tool to generate DDL for the tables -->
		<ddlExport url="${DBURL}" dest="db/tables.sql" verbose="yes" />

		<!-- Package the DB up for read-only distribution -->
		<jar destfile="db/db.jar">
			<fileset dir=".">
				<include name="db/my/**/*" />
			</fileset>
		</jar>

		<!-- Shutdown Derby properly.  This should be done every time,
		         but only when you're absolutely done using Derby -->
		<stopDerby />


	</target>

</project>